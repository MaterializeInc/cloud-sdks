diff --git a/rust/src/apis/deployments_api.rs b/rust/src/apis/deployments_api.rs
index 9db4a7a..949cc56 100644
--- a/rust/src/apis/deployments_api.rs
+++ b/rust/src/apis/deployments_api.rs
@@ -4,16 +4,14 @@
  * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  *
  * The version of the OpenAPI document: 0.1.0
- * 
+ *
  * Generated by: https://openapi-generator.tech
  */
 
-
 use reqwest;
 
+use super::{configuration, Error};
 use crate::apis::ResponseContent;
-use super::{Error, configuration};
-
 
 /// struct for typed errors of method `deployments_certs_retrieve`
 #[derive(Debug, Clone, Serialize, Deserialize)]
@@ -78,17 +76,24 @@ pub enum DeploymentsUpdateError {
     UnknownValue(serde_json::Value),
 }
 
-
 /// Retrieve a TLS certificate bundle for a deployment.  The TLS certificate bundle is a ZIP file containing PEM and DER formatted keys that permit authenticating to the deployment as the `materialize` user.
-pub async fn deployments_certs_retrieve(configuration: &configuration::Configuration, id: &str) -> Result<std::path::PathBuf, Error<DeploymentsCertsRetrieveError>> {
-
+pub async fn deployments_certs_retrieve(
+    configuration: &configuration::Configuration,
+    id: &str,
+) -> Result<Vec<u8>, Error<DeploymentsCertsRetrieveError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}/certs", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}/certs",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -98,27 +103,36 @@ pub async fn deployments_certs_retrieve(configuration: &configuration::Configura
     let local_var_resp = local_var_client.execute(local_var_req).await?;
 
     let local_var_status = local_var_resp.status();
-    let local_var_content = local_var_resp.text().await?;
 
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        serde_json::from_str(&local_var_content).map_err(Error::from)
+        Ok(local_var_resp.bytes().await?.to_vec())
     } else {
-        let local_var_entity: Option<DeploymentsCertsRetrieveError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_content = local_var_resp.text().await?;
+        let local_var_entity: Option<DeploymentsCertsRetrieveError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Create a new deployment.
-pub async fn deployments_create(configuration: &configuration::Configuration, deployment_request: Option<crate::models::DeploymentRequest>) -> Result<crate::models::Deployment, Error<DeploymentsCreateError>> {
-
+pub async fn deployments_create(
+    configuration: &configuration::Configuration,
+    deployment_request: Option<crate::models::DeploymentRequest>,
+) -> Result<crate::models::Deployment, Error<DeploymentsCreateError>> {
     let local_var_client = &configuration.client;
 
     let local_var_uri_str = format!("{}/api/deployments", configuration.base_path);
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -134,22 +148,35 @@ pub async fn deployments_create(configuration: &configuration::Configuration, de
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         serde_json::from_str(&local_var_content).map_err(Error::from)
     } else {
-        let local_var_entity: Option<DeploymentsCreateError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsCreateError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Destroy a deployment.
-pub async fn deployments_destroy(configuration: &configuration::Configuration, id: &str) -> Result<(), Error<DeploymentsDestroyError>> {
-
+pub async fn deployments_destroy(
+    configuration: &configuration::Configuration,
+    id: &str,
+) -> Result<(), Error<DeploymentsDestroyError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -164,22 +191,30 @@ pub async fn deployments_destroy(configuration: &configuration::Configuration, i
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         Ok(())
     } else {
-        let local_var_entity: Option<DeploymentsDestroyError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsDestroyError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// List the available deployments.
-pub async fn deployments_list(configuration: &configuration::Configuration, ) -> Result<Vec<crate::models::Deployment>, Error<DeploymentsListError>> {
-
+pub async fn deployments_list(
+    configuration: &configuration::Configuration,
+) -> Result<Vec<crate::models::Deployment>, Error<DeploymentsListError>> {
     let local_var_client = &configuration.client;
 
     let local_var_uri_str = format!("{}/api/deployments", configuration.base_path);
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -194,22 +229,35 @@ pub async fn deployments_list(configuration: &configuration::Configuration, ) ->
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         serde_json::from_str(&local_var_content).map_err(Error::from)
     } else {
-        let local_var_entity: Option<DeploymentsListError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsListError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Retrieve the logs for a deployment.
-pub async fn deployments_logs_retrieve(configuration: &configuration::Configuration, id: &str) -> Result<String, Error<DeploymentsLogsRetrieveError>> {
-
+pub async fn deployments_logs_retrieve(
+    configuration: &configuration::Configuration,
+    id: &str,
+) -> Result<String, Error<DeploymentsLogsRetrieveError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}/logs", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}/logs",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -222,24 +270,38 @@ pub async fn deployments_logs_retrieve(configuration: &configuration::Configurat
     let local_var_content = local_var_resp.text().await?;
 
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        serde_json::from_str(&local_var_content).map_err(Error::from)
+        Ok(local_var_content)
     } else {
-        let local_var_entity: Option<DeploymentsLogsRetrieveError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsLogsRetrieveError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Partially update a deployment.
-pub async fn deployments_partial_update(configuration: &configuration::Configuration, id: &str, patched_deployment_request: Option<crate::models::PatchedDeploymentRequest>) -> Result<crate::models::Deployment, Error<DeploymentsPartialUpdateError>> {
-
+pub async fn deployments_partial_update(
+    configuration: &configuration::Configuration,
+    id: &str,
+    patched_deployment_request: Option<crate::models::PatchedDeploymentRequest>,
+) -> Result<crate::models::Deployment, Error<DeploymentsPartialUpdateError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -255,22 +317,35 @@ pub async fn deployments_partial_update(configuration: &configuration::Configura
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         serde_json::from_str(&local_var_content).map_err(Error::from)
     } else {
-        let local_var_entity: Option<DeploymentsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsPartialUpdateError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Fetch details about a single deployment.
-pub async fn deployments_retrieve(configuration: &configuration::Configuration, id: &str) -> Result<crate::models::Deployment, Error<DeploymentsRetrieveError>> {
-
+pub async fn deployments_retrieve(
+    configuration: &configuration::Configuration,
+    id: &str,
+) -> Result<crate::models::Deployment, Error<DeploymentsRetrieveError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -285,22 +360,35 @@ pub async fn deployments_retrieve(configuration: &configuration::Configuration,
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         serde_json::from_str(&local_var_content).map_err(Error::from)
     } else {
-        let local_var_entity: Option<DeploymentsRetrieveError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsRetrieveError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Retrieve the logs for a Tailscale container.
-pub async fn deployments_tailscale_logs_retrieve(configuration: &configuration::Configuration, id: &str) -> Result<String, Error<DeploymentsTailscaleLogsRetrieveError>> {
-
+pub async fn deployments_tailscale_logs_retrieve(
+    configuration: &configuration::Configuration,
+    id: &str,
+) -> Result<String, Error<DeploymentsTailscaleLogsRetrieveError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}/tailscale_logs", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}/tailscale_logs",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -313,24 +401,38 @@ pub async fn deployments_tailscale_logs_retrieve(configuration: &configuration::
     let local_var_content = local_var_resp.text().await?;
 
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
-        serde_json::from_str(&local_var_content).map_err(Error::from)
+        Ok(local_var_content)
     } else {
-        let local_var_entity: Option<DeploymentsTailscaleLogsRetrieveError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsTailscaleLogsRetrieveError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
 
 /// Update a deployment.
-pub async fn deployments_update(configuration: &configuration::Configuration, id: &str, deployment_request: Option<crate::models::DeploymentRequest>) -> Result<crate::models::Deployment, Error<DeploymentsUpdateError>> {
-
+pub async fn deployments_update(
+    configuration: &configuration::Configuration,
+    id: &str,
+    deployment_request: Option<crate::models::DeploymentRequest>,
+) -> Result<crate::models::Deployment, Error<DeploymentsUpdateError>> {
     let local_var_client = &configuration.client;
 
-    let local_var_uri_str = format!("{}/api/deployments/{id}", configuration.base_path, id=crate::apis::urlencode(id));
-    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());
+    let local_var_uri_str = format!(
+        "{}/api/deployments/{id}",
+        configuration.base_path,
+        id = crate::apis::urlencode(id)
+    );
+    let mut local_var_req_builder =
+        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());
 
     if let Some(ref local_var_user_agent) = configuration.user_agent {
-        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
+        local_var_req_builder =
+            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
     }
     if let Some(ref local_var_token) = configuration.bearer_access_token {
         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
@@ -346,9 +448,13 @@ pub async fn deployments_update(configuration: &configuration::Configuration, id
     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
         serde_json::from_str(&local_var_content).map_err(Error::from)
     } else {
-        let local_var_entity: Option<DeploymentsUpdateError> = serde_json::from_str(&local_var_content).ok();
-        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
+        let local_var_entity: Option<DeploymentsUpdateError> =
+            serde_json::from_str(&local_var_content).ok();
+        let local_var_error = ResponseContent {
+            status: local_var_status,
+            content: local_var_content,
+            entity: local_var_entity,
+        };
         Err(Error::ResponseError(local_var_error))
     }
 }
-
diff --git a/rust/src/models/deployment.rs b/rust/src/models/deployment.rs
index 9ace0c6..4af0d36 100644
--- a/rust/src/models/deployment.rs
+++ b/rust/src/models/deployment.rs
@@ -61,7 +61,7 @@ impl Deployment {
             materialized_extra_args,
             cluster_id,
             mz_version,
-            pending_migration: Box::new(pending_migration),
+            pending_migration: pending_migration.map(Box::new),
             status,
         }
     }
