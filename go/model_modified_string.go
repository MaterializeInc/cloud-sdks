/*
 * Materialize Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mzcloud

import (
	"encoding/json"
)

// ModifiedString struct for ModifiedString
type ModifiedString struct {
	Old NullableString `json:"old"`
	New NullableString `json:"new"`
}

// NewModifiedString instantiates a new ModifiedString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifiedString(old NullableString, new NullableString) *ModifiedString {
	this := ModifiedString{}
	this.Old = old
	this.New = new
	return &this
}

// NewModifiedStringWithDefaults instantiates a new ModifiedString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifiedStringWithDefaults() *ModifiedString {
	this := ModifiedString{}
	return &this
}

// GetOld returns the Old field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ModifiedString) GetOld() string {
	if o == nil || o.Old.Get() == nil {
		var ret string
		return ret
	}

	return *o.Old.Get()
}

// GetOldOk returns a tuple with the Old field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifiedString) GetOldOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Old.Get(), o.Old.IsSet()
}

// SetOld sets field value
func (o *ModifiedString) SetOld(v string) {
	o.Old.Set(&v)
}

// GetNew returns the New field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ModifiedString) GetNew() string {
	if o == nil || o.New.Get() == nil {
		var ret string
		return ret
	}

	return *o.New.Get()
}

// GetNewOk returns a tuple with the New field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifiedString) GetNewOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.New.Get(), o.New.IsSet()
}

// SetNew sets field value
func (o *ModifiedString) SetNew(v string) {
	o.New.Set(&v)
}

func (o ModifiedString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["old"] = o.Old.Get()
	}
	if true {
		toSerialize["new"] = o.New.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableModifiedString struct {
	value *ModifiedString
	isSet bool
}

func (v NullableModifiedString) Get() *ModifiedString {
	return v.value
}

func (v *NullableModifiedString) Set(val *ModifiedString) {
	v.value = val
	v.isSet = true
}

func (v NullableModifiedString) IsSet() bool {
	return v.isSet
}

func (v *NullableModifiedString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifiedString(val *ModifiedString) *NullableModifiedString {
	return &NullableModifiedString{value: val, isSet: true}
}

func (v NullableModifiedString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifiedString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


