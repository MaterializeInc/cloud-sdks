/*
 * Materialize Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mzcloud

import (
	"encoding/json"
	"fmt"
)

// OperationEnum the model 'OperationEnum'
type OperationEnum string

// List of OperationEnum
const (
	CREATE OperationEnum = "CREATE"
	UPDATE OperationEnum = "UPDATE"
	DELETE OperationEnum = "DELETE"
)

var allowedOperationEnumEnumValues = []OperationEnum{
	"CREATE",
	"UPDATE",
	"DELETE",
}

func (v *OperationEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperationEnum(value)
	for _, existing := range allowedOperationEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperationEnum", value)
}

// NewOperationEnumFromValue returns a pointer to a valid OperationEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperationEnumFromValue(v string) (*OperationEnum, error) {
	ev := OperationEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperationEnum: valid values are %v", v, allowedOperationEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperationEnum) IsValid() bool {
	for _, existing := range allowedOperationEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperationEnum value
func (v OperationEnum) Ptr() *OperationEnum {
	return &v
}

type NullableOperationEnum struct {
	value *OperationEnum
	isSet bool
}

func (v NullableOperationEnum) Get() *OperationEnum {
	return v.value
}

func (v *NullableOperationEnum) Set(val *OperationEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationEnum(val *OperationEnum) *NullableOperationEnum {
	return &NullableOperationEnum{value: val, isSet: true}
}

func (v NullableOperationEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

