/*
 * Materialize Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mzcloud

import (
	"encoding/json"
)

// PatchedDeploymentRequest struct for PatchedDeploymentRequest
type PatchedDeploymentRequest struct {
	Size *DeploymentSize `json:"size,omitempty"`
	MzVersion *string `json:"mzVersion,omitempty"`
}

// NewPatchedDeploymentRequest instantiates a new PatchedDeploymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedDeploymentRequest() *PatchedDeploymentRequest {
	this := PatchedDeploymentRequest{}
	return &this
}

// NewPatchedDeploymentRequestWithDefaults instantiates a new PatchedDeploymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedDeploymentRequestWithDefaults() *PatchedDeploymentRequest {
	this := PatchedDeploymentRequest{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PatchedDeploymentRequest) GetSize() DeploymentSize {
	if o == nil || o.Size == nil {
		var ret DeploymentSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeploymentRequest) GetSizeOk() (*DeploymentSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PatchedDeploymentRequest) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given DeploymentSize and assigns it to the Size field.
func (o *PatchedDeploymentRequest) SetSize(v DeploymentSize) {
	o.Size = &v
}

// GetMzVersion returns the MzVersion field value if set, zero value otherwise.
func (o *PatchedDeploymentRequest) GetMzVersion() string {
	if o == nil || o.MzVersion == nil {
		var ret string
		return ret
	}
	return *o.MzVersion
}

// GetMzVersionOk returns a tuple with the MzVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDeploymentRequest) GetMzVersionOk() (*string, bool) {
	if o == nil || o.MzVersion == nil {
		return nil, false
	}
	return o.MzVersion, true
}

// HasMzVersion returns a boolean if a field has been set.
func (o *PatchedDeploymentRequest) HasMzVersion() bool {
	if o != nil && o.MzVersion != nil {
		return true
	}

	return false
}

// SetMzVersion gets a reference to the given string and assigns it to the MzVersion field.
func (o *PatchedDeploymentRequest) SetMzVersion(v string) {
	o.MzVersion = &v
}

func (o PatchedDeploymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.MzVersion != nil {
		toSerialize["mzVersion"] = o.MzVersion
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedDeploymentRequest struct {
	value *PatchedDeploymentRequest
	isSet bool
}

func (v NullablePatchedDeploymentRequest) Get() *PatchedDeploymentRequest {
	return v.value
}

func (v *NullablePatchedDeploymentRequest) Set(val *PatchedDeploymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedDeploymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedDeploymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedDeploymentRequest(val *PatchedDeploymentRequest) *NullablePatchedDeploymentRequest {
	return &NullablePatchedDeploymentRequest{value: val, isSet: true}
}

func (v NullablePatchedDeploymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedDeploymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


