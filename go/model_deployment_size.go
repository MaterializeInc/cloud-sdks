/*
 * Materialize Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mzcloud

import (
	"encoding/json"
	"fmt"
)

// DeploymentSize the model 'DeploymentSize'
type DeploymentSize string

// List of DeploymentSize
const (
	XS DeploymentSize = "XS"
	S DeploymentSize = "S"
	M DeploymentSize = "M"
	L DeploymentSize = "L"
	XL DeploymentSize = "XL"
)

var allowedDeploymentSizeEnumValues = []DeploymentSize{
	"XS",
	"S",
	"M",
	"L",
	"XL",
}

func (v *DeploymentSize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentSize(value)
	for _, existing := range allowedDeploymentSizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentSize", value)
}

// NewDeploymentSizeFromValue returns a pointer to a valid DeploymentSize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentSizeFromValue(v string) (*DeploymentSize, error) {
	ev := DeploymentSize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentSize: valid values are %v", v, allowedDeploymentSizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentSize) IsValid() bool {
	for _, existing := range allowedDeploymentSizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentSize value
func (v DeploymentSize) Ptr() *DeploymentSize {
	return &v
}

type NullableDeploymentSize struct {
	value *DeploymentSize
	isSet bool
}

func (v NullableDeploymentSize) Get() *DeploymentSize {
	return v.value
}

func (v *NullableDeploymentSize) Set(val *DeploymentSize) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentSize) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentSize(val *DeploymentSize) *NullableDeploymentSize {
	return &NullableDeploymentSize{value: val, isSet: true}
}

func (v NullableDeploymentSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

