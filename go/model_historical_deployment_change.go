/*
 * Materialize Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mzcloud

import (
	"encoding/json"
)

// HistoricalDeploymentChange struct for HistoricalDeploymentChange
type HistoricalDeploymentChange struct {
	Name *ModifiedString `json:"name,omitempty"`
	Hostname *ModifiedString `json:"hostname,omitempty"`
	FlaggedForDeletion *ModifiedBoolean `json:"flaggedForDeletion,omitempty"`
	FlaggedForUpdate *ModifiedBoolean `json:"flaggedForUpdate,omitempty"`
	CatalogRestoreMode *ModifiedBoolean `json:"catalogRestoreMode,omitempty"`
	Size *ModifiedSize `json:"size,omitempty"`
	DisableUserIndexes *ModifiedBoolean `json:"disableUserIndexes,omitempty"`
	MaterializedExtraArgs *ModifiedStringList `json:"materializedExtraArgs,omitempty"`
	ClusterId *ModifiedString `json:"clusterId,omitempty"`
	MzVersion *ModifiedString `json:"mzVersion,omitempty"`
	EnableTailscale *ModifiedBoolean `json:"enableTailscale,omitempty"`
}

// NewHistoricalDeploymentChange instantiates a new HistoricalDeploymentChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalDeploymentChange() *HistoricalDeploymentChange {
	this := HistoricalDeploymentChange{}
	return &this
}

// NewHistoricalDeploymentChangeWithDefaults instantiates a new HistoricalDeploymentChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalDeploymentChangeWithDefaults() *HistoricalDeploymentChange {
	this := HistoricalDeploymentChange{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetName() ModifiedString {
	if o == nil || o.Name == nil {
		var ret ModifiedString
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetNameOk() (*ModifiedString, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given ModifiedString and assigns it to the Name field.
func (o *HistoricalDeploymentChange) SetName(v ModifiedString) {
	o.Name = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetHostname() ModifiedString {
	if o == nil || o.Hostname == nil {
		var ret ModifiedString
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetHostnameOk() (*ModifiedString, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given ModifiedString and assigns it to the Hostname field.
func (o *HistoricalDeploymentChange) SetHostname(v ModifiedString) {
	o.Hostname = &v
}

// GetFlaggedForDeletion returns the FlaggedForDeletion field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetFlaggedForDeletion() ModifiedBoolean {
	if o == nil || o.FlaggedForDeletion == nil {
		var ret ModifiedBoolean
		return ret
	}
	return *o.FlaggedForDeletion
}

// GetFlaggedForDeletionOk returns a tuple with the FlaggedForDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetFlaggedForDeletionOk() (*ModifiedBoolean, bool) {
	if o == nil || o.FlaggedForDeletion == nil {
		return nil, false
	}
	return o.FlaggedForDeletion, true
}

// HasFlaggedForDeletion returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasFlaggedForDeletion() bool {
	if o != nil && o.FlaggedForDeletion != nil {
		return true
	}

	return false
}

// SetFlaggedForDeletion gets a reference to the given ModifiedBoolean and assigns it to the FlaggedForDeletion field.
func (o *HistoricalDeploymentChange) SetFlaggedForDeletion(v ModifiedBoolean) {
	o.FlaggedForDeletion = &v
}

// GetFlaggedForUpdate returns the FlaggedForUpdate field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetFlaggedForUpdate() ModifiedBoolean {
	if o == nil || o.FlaggedForUpdate == nil {
		var ret ModifiedBoolean
		return ret
	}
	return *o.FlaggedForUpdate
}

// GetFlaggedForUpdateOk returns a tuple with the FlaggedForUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetFlaggedForUpdateOk() (*ModifiedBoolean, bool) {
	if o == nil || o.FlaggedForUpdate == nil {
		return nil, false
	}
	return o.FlaggedForUpdate, true
}

// HasFlaggedForUpdate returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasFlaggedForUpdate() bool {
	if o != nil && o.FlaggedForUpdate != nil {
		return true
	}

	return false
}

// SetFlaggedForUpdate gets a reference to the given ModifiedBoolean and assigns it to the FlaggedForUpdate field.
func (o *HistoricalDeploymentChange) SetFlaggedForUpdate(v ModifiedBoolean) {
	o.FlaggedForUpdate = &v
}

// GetCatalogRestoreMode returns the CatalogRestoreMode field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetCatalogRestoreMode() ModifiedBoolean {
	if o == nil || o.CatalogRestoreMode == nil {
		var ret ModifiedBoolean
		return ret
	}
	return *o.CatalogRestoreMode
}

// GetCatalogRestoreModeOk returns a tuple with the CatalogRestoreMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetCatalogRestoreModeOk() (*ModifiedBoolean, bool) {
	if o == nil || o.CatalogRestoreMode == nil {
		return nil, false
	}
	return o.CatalogRestoreMode, true
}

// HasCatalogRestoreMode returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasCatalogRestoreMode() bool {
	if o != nil && o.CatalogRestoreMode != nil {
		return true
	}

	return false
}

// SetCatalogRestoreMode gets a reference to the given ModifiedBoolean and assigns it to the CatalogRestoreMode field.
func (o *HistoricalDeploymentChange) SetCatalogRestoreMode(v ModifiedBoolean) {
	o.CatalogRestoreMode = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetSize() ModifiedSize {
	if o == nil || o.Size == nil {
		var ret ModifiedSize
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetSizeOk() (*ModifiedSize, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given ModifiedSize and assigns it to the Size field.
func (o *HistoricalDeploymentChange) SetSize(v ModifiedSize) {
	o.Size = &v
}

// GetDisableUserIndexes returns the DisableUserIndexes field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetDisableUserIndexes() ModifiedBoolean {
	if o == nil || o.DisableUserIndexes == nil {
		var ret ModifiedBoolean
		return ret
	}
	return *o.DisableUserIndexes
}

// GetDisableUserIndexesOk returns a tuple with the DisableUserIndexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetDisableUserIndexesOk() (*ModifiedBoolean, bool) {
	if o == nil || o.DisableUserIndexes == nil {
		return nil, false
	}
	return o.DisableUserIndexes, true
}

// HasDisableUserIndexes returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasDisableUserIndexes() bool {
	if o != nil && o.DisableUserIndexes != nil {
		return true
	}

	return false
}

// SetDisableUserIndexes gets a reference to the given ModifiedBoolean and assigns it to the DisableUserIndexes field.
func (o *HistoricalDeploymentChange) SetDisableUserIndexes(v ModifiedBoolean) {
	o.DisableUserIndexes = &v
}

// GetMaterializedExtraArgs returns the MaterializedExtraArgs field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetMaterializedExtraArgs() ModifiedStringList {
	if o == nil || o.MaterializedExtraArgs == nil {
		var ret ModifiedStringList
		return ret
	}
	return *o.MaterializedExtraArgs
}

// GetMaterializedExtraArgsOk returns a tuple with the MaterializedExtraArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetMaterializedExtraArgsOk() (*ModifiedStringList, bool) {
	if o == nil || o.MaterializedExtraArgs == nil {
		return nil, false
	}
	return o.MaterializedExtraArgs, true
}

// HasMaterializedExtraArgs returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasMaterializedExtraArgs() bool {
	if o != nil && o.MaterializedExtraArgs != nil {
		return true
	}

	return false
}

// SetMaterializedExtraArgs gets a reference to the given ModifiedStringList and assigns it to the MaterializedExtraArgs field.
func (o *HistoricalDeploymentChange) SetMaterializedExtraArgs(v ModifiedStringList) {
	o.MaterializedExtraArgs = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetClusterId() ModifiedString {
	if o == nil || o.ClusterId == nil {
		var ret ModifiedString
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetClusterIdOk() (*ModifiedString, bool) {
	if o == nil || o.ClusterId == nil {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasClusterId() bool {
	if o != nil && o.ClusterId != nil {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given ModifiedString and assigns it to the ClusterId field.
func (o *HistoricalDeploymentChange) SetClusterId(v ModifiedString) {
	o.ClusterId = &v
}

// GetMzVersion returns the MzVersion field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetMzVersion() ModifiedString {
	if o == nil || o.MzVersion == nil {
		var ret ModifiedString
		return ret
	}
	return *o.MzVersion
}

// GetMzVersionOk returns a tuple with the MzVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetMzVersionOk() (*ModifiedString, bool) {
	if o == nil || o.MzVersion == nil {
		return nil, false
	}
	return o.MzVersion, true
}

// HasMzVersion returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasMzVersion() bool {
	if o != nil && o.MzVersion != nil {
		return true
	}

	return false
}

// SetMzVersion gets a reference to the given ModifiedString and assigns it to the MzVersion field.
func (o *HistoricalDeploymentChange) SetMzVersion(v ModifiedString) {
	o.MzVersion = &v
}

// GetEnableTailscale returns the EnableTailscale field value if set, zero value otherwise.
func (o *HistoricalDeploymentChange) GetEnableTailscale() ModifiedBoolean {
	if o == nil || o.EnableTailscale == nil {
		var ret ModifiedBoolean
		return ret
	}
	return *o.EnableTailscale
}

// GetEnableTailscaleOk returns a tuple with the EnableTailscale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalDeploymentChange) GetEnableTailscaleOk() (*ModifiedBoolean, bool) {
	if o == nil || o.EnableTailscale == nil {
		return nil, false
	}
	return o.EnableTailscale, true
}

// HasEnableTailscale returns a boolean if a field has been set.
func (o *HistoricalDeploymentChange) HasEnableTailscale() bool {
	if o != nil && o.EnableTailscale != nil {
		return true
	}

	return false
}

// SetEnableTailscale gets a reference to the given ModifiedBoolean and assigns it to the EnableTailscale field.
func (o *HistoricalDeploymentChange) SetEnableTailscale(v ModifiedBoolean) {
	o.EnableTailscale = &v
}

func (o HistoricalDeploymentChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.FlaggedForDeletion != nil {
		toSerialize["flaggedForDeletion"] = o.FlaggedForDeletion
	}
	if o.FlaggedForUpdate != nil {
		toSerialize["flaggedForUpdate"] = o.FlaggedForUpdate
	}
	if o.CatalogRestoreMode != nil {
		toSerialize["catalogRestoreMode"] = o.CatalogRestoreMode
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.DisableUserIndexes != nil {
		toSerialize["disableUserIndexes"] = o.DisableUserIndexes
	}
	if o.MaterializedExtraArgs != nil {
		toSerialize["materializedExtraArgs"] = o.MaterializedExtraArgs
	}
	if o.ClusterId != nil {
		toSerialize["clusterId"] = o.ClusterId
	}
	if o.MzVersion != nil {
		toSerialize["mzVersion"] = o.MzVersion
	}
	if o.EnableTailscale != nil {
		toSerialize["enableTailscale"] = o.EnableTailscale
	}
	return json.Marshal(toSerialize)
}

type NullableHistoricalDeploymentChange struct {
	value *HistoricalDeploymentChange
	isSet bool
}

func (v NullableHistoricalDeploymentChange) Get() *HistoricalDeploymentChange {
	return v.value
}

func (v *NullableHistoricalDeploymentChange) Set(val *HistoricalDeploymentChange) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalDeploymentChange) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalDeploymentChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalDeploymentChange(val *HistoricalDeploymentChange) *NullableHistoricalDeploymentChange {
	return &NullableHistoricalDeploymentChange{value: val, isSet: true}
}

func (v NullableHistoricalDeploymentChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalDeploymentChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


